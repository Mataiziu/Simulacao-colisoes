# Codigo do programa feito no site codeskulptor com o link: https://py3.codeskulptor.org/#user306_kJwp0katSg_11.py

import simplegui
import random
import math

screen_size = 500

screen = [16 * screen_size / 9, screen_size]

grid_n = 35			# Must be odd
grid_distances = [screen_size / grid_n, screen_size / grid_n]
grid_point_zero = [0, 0]
grid_index = []

for i in range(grid_n):
    index = []
    for j in range(grid_n):
        index += [[i, j, []]]
    grid_index += [index]
    
ball_radius = 3
ball_border = 0.1

balls = []
ball_collided = []

can_new = True

need_new_ball = 0

heat = 2.5

pause = False
red_time = 1
red_time_status = False

FPS = 0

pressure = 0.0
pressure_time = 0

second = 0

print(f'Second = {second}, amount of balls = 0, heat = {heat} pressure per sec = {pressure}, FPS = 60')

class ball:
    
    def __init__(self):
        self.position = list([screen_size - ball_radius, screen_size / 2])
        self.velocity = [random.triangular(-1, -0.01), random.triangular(-1, 1)]
        self.color = (255, 255, 255)
        self.MFP = list([screen_size - ball_radius, screen_size / 2])
    
    def speed(self):
        ball_speed = (self.velocity[0]**2 + self.velocity[1]**2) ** 0.5
        if ball_speed > 8:
            self.color = (0,0,255)
            
        else:
            self.color = (255, 255 - int(ball_speed * 30), int(ball_speed * 30))
        
        
# Tell Where is the ball in the grid
def where_balls_grid():
    global grid_n, grid_index, grid_distances
        
    # Clear the grid
    for i in range(grid_n):
        for j in range(grid_n):
            grid_index[i][j][2] = []
            
    # Add ball to your grid
    for i in range(len(balls)):
        
        nx = int(balls[i].position[0] / grid_distances[0])
        ny = int(balls[i].position[1] / grid_distances[1])
        
        this_index = [nx, ny]
        
        grid_index[this_index[1]][this_index[0]][2] += [i]


# Distance between two balls
def distance(ball1, ball2):
    return (((ball1[0] - ball2[0]) ** 2) + ((ball1[1] - ball2[1]) ** 2))** 0.5


# Gives velocity vectors after collision
def collision(v1, v2, p1, p2):
    # Vector at the ball collision center
    vector = [p2[0] - p1[0], p2[1] - p1[1]]

    # Finding unit normal and unit tangent vector
    module = ((vector[0] ** 2) + (vector[1] ** 2))** 0.5
    k = [vector[0] / module, vector[1] / module]

    v_relative = [v1[0] - v2[0], v1[1] - v2[1]]

    # Creating the velocity vectors onto the unit normal and unit tangent vectors
    v_normal = v_relative[0] * k[0] + v_relative[1] * k[1]

    v_normal = [k[0] * v_normal, k[1] * v_normal]

    v1 = [v1[0] - v_normal[0], v1[1] - v_normal[1]]
    v2 = [v2[0] + v_normal[0], v2[1] + v_normal[1]]

    # Returning both velocities
    return v1, v2

# Check collisions
def general_collision():
    global grid_index, ball_velocity, can_new, ball_collided
    
    # Put balls in grid
    where_balls_grid()
    
    # For every grid
    for k in grid_index:
        for l in k:
            
            # Collision for entering balls
            if l[0] == ((len(grid_index)/2) - 0.5) and l[1] == (len(grid_index)) - 1 and len(grid_index[l[0]][l[1]][2]) == 0:
                can_new = True
            
            
            # Exept left and top grids
            elif 0 < l[0] and 0 < l[1]:
                
                # Check the grid and the neighbor on left, top and top-left
                grid_around = [grid_index[l[0] - 1][l[1] - 1][2] + grid_index[l[0]][l[1] - 1][2] +  
                               grid_index[l[0] - 1][l[1]][2]     + grid_index[l[0]][l[1]][2]      ]
                
                # If there is more than 1 ball in the grid
                if len(grid_around[0]) > 1:
                    
                    # For every ball in grid
                    for n in grid_around[0]:
                        for i in grid_around[0]:
                            
                            # If ball don't collided
                            if n not in ball_collided and i not in ball_collided:
                                
                                # General collision
                                if n != i and distance(balls[n].position, balls[i].position) <= 2 * ball_radius:
                                        
                                    balls[n].velocity, balls[i].velocity = collision(balls[n].velocity, balls[i].velocity, balls[n].position, balls[i].position)
                                    
                                    ball_collided.append(n)
                                    ball_collided.append(i)
                                    
                                    #mean_free_path(n)
                                    #mean_free_path(i)
    
    # Clear the collision status of the balls
    ball_collided = []
    

# Mean free path
def mean_free_path(n):
    global ballMFP
    
    MFP = distance(balls[n].position, balls[n].MFP)
    
    #print(MFP)

    balls[n].MFP = list(balls[n].position)


# Handler to draw on canvas
def draw(canvas):
    for i in range(grid_n):
        canvas.draw_line((0, grid_distances[0] * i), (screen_size, grid_distances[0] * i), 1, 'rgb(30,30,30)')
        canvas.draw_line((grid_distances[1] * i, 0), (grid_distances[1] * i, screen_size), 1, 'rgb(30,30,30)')
    
    # Drawing each ball
    for n in range(len(balls)):
        canvas.draw_circle([balls[n].position[0], balls[n].position[1]], ball_radius, ball_border, 'Transparent', f"rgb{balls[n].color}")

    canvas.draw_polygon([[screen_size, screen_size], [screen[0], screen_size], [screen[0], 0], [screen_size, 0]], 2, 'Transparent', 'Black')
    canvas.draw_polygon([[screen_size, screen_size], [0, screen_size], [0, 0], [screen_size, 0]], 2, 'White', 'Transparent')
    canvas.draw_line([screen_size, (screen_size / 2) + ball_radius], [screen_size, (screen_size / 2) - ball_radius], 4, 'Blue')
    
    
    
    # pause
    if pause:
        canvas.draw_polygon([[screen[0] - 250, 50], [screen[0] - 250, 0], [screen[0] - 300, 0], [screen[0] - 300, 50]], 2, 'White', 'White')

    else:
        canvas.draw_polygon([[screen[0] - 250, 50], [screen[0] - 250, 0], [screen[0] - 300, 0], [screen[0] - 300, 50]], 2, 'White', 'Black')

    canvas.draw_polygon([[screen[0] - 270, 35], [screen[0] - 270, 15], [screen[0] - 260, 15], [screen[0] - 260, 35]], 2, 'White', 'Black')
    canvas.draw_polygon([[screen[0] - 280, 35], [screen[0] - 280, 15], [screen[0] - 290, 15], [screen[0] - 290, 35]], 2, 'White', 'Black')

    # ball+, ball-
    canvas.draw_polygon([[screen[0] - 50, 50], [screen[0] - 50, 0], [screen[0] - 100, 0], [screen[0] - 100, 50]], 2, 'White', 'Transparent')
    canvas.draw_polygon([[screen[0] - 2, 50], [screen[0] - 2, 0], [screen[0] - 50, 0], [screen[0] - 50, 50]], 2, 'White', 'Transparent')

    canvas.draw_text('+ Ball', (screen[0] - 90, 30), 12, 'White')
    canvas.draw_text('- Ball', (screen[0] - 40, 30), 12, 'White')

    # ball+10, ball-10
    canvas.draw_polygon([[screen[0] - 50, 50], [screen[0] - 50, 100], [screen[0] - 100, 100], [screen[0] - 100, 50]], 2, 'White', 'Transparent')
    canvas.draw_polygon([[screen[0] - 2, 50], [screen[0] - 2, 100], [screen[0] - 50, 100], [screen[0] - 50, 50]], 2, 'White', 'Transparent')

    canvas.draw_text('+10 Ball', (screen[0] - 100, 80), 12, 'White')
    canvas.draw_text('-10 Ball', (screen[0] - 50, 80), 12, 'White')

    # heat+, heat-
    canvas.draw_polygon([[screen[0] - 50, 150], [screen[0] - 50, 200], [screen[0] - 100, 200], [screen[0] - 100, 150]], 2, 'White', 'Transparent')
    canvas.draw_polygon([[screen[0] - 2, 150], [screen[0] - 2, 200], [screen[0] - 50, 200], [screen[0] - 50, 150]], 2, 'White', 'Transparent')

    canvas.draw_text('+ Heat', (screen[0] - 90, 180), 12, 'White')
    canvas.draw_text('- Heat', (screen[0] - 40, 180), 12, 'White')

    # heat+1, heat-1
    canvas.draw_polygon([[screen[0] - 50, 250], [screen[0] - 50, 200], [screen[0] - 100, 200], [screen[0] - 100, 250]], 2, 'White', 'Transparent')
    canvas.draw_polygon([[screen[0] - 2, 250], [screen[0] - 2, 200], [screen[0] - 50, 200], [screen[0] - 50, 250]], 2, 'White', 'Transparent')

    canvas.draw_text('+1 Heat', (screen[0] - 100, 230), 12, 'White')
    canvas.draw_text('-1 Heat', (screen[0] - 50, 230), 12, 'White')

    # general text
    canvas.draw_text('BPM = ' + str(int(pressure)), (screen_size + 20, 20), 12, 'White')
    canvas.draw_text('Balls = ' + str(len(balls)), (screen_size + 20, 40), 12, 'White')
    canvas.draw_text('Heat = ' + str(heat), (screen_size + 20, 60), 12, 'White')


# Handler to mouse click
def mouse_handler(position):
    global balls, need_new_ball, heat, pause

    mouse_position = [position[0], position[1]]

    # pause
    if screen[0] - 300 < mouse_position[0] < screen[0] - 250 and 0 < mouse_position[1] < 50:
        if not pause:
            work.stop()
            timer.stop()

            pause = True

        else:
            work.start()
            timer.start()

            pause = False
    
    elif screen[0] - 100 < mouse_position[0] < screen[0] - 50:
        # ball +
        if 0 < mouse_position[1] < 50:
            need_new_ball += 1
        
        # ball + 10
        elif 50 < mouse_position[1] < 100:
            need_new_ball += 10
            
        # heat + 0.1
        elif 150 < mouse_position[1] < 200:
            heat += 0.1
            heat = round(heat, 1)
        
        # heat + 1
        elif 200 < mouse_position[1] < 250:
            heat += 1
            heat = round(heat, 1)
    
    
    elif screen[0] - 50 < mouse_position[0] < screen[0]:
        # ball -
        if 0 < mouse_position[1] < 50:
            need_new_ball -= 1
        
        # ball - 10
        elif 50 < mouse_position[1] < 100:
            need_new_ball -= 10
            
        # heat - 0.1
        elif 150 < mouse_position[1] < 200:
            if heat != 0:
                heat -= 0.1
                heat = round(heat, 1)
        
        # heat - 1
        elif 200 < mouse_position[1] < 250:
            if heat > 1:
                heat -= 1
                heat = round(heat, 1)

            else:
                heat = 0
    
    
    # Coloring in pause
    elif pause:
        for n in range(len(balls)):
            if distance(mouse_position, balls[n].position) <= ball_radius:
                if balls[n].color != (255,0,0):
                    balls[n].color = (255,0,0)

                else:
                    balls[n].color = (255,255,255)


# Work in iteration
def work_handler():
    global balls, ball_velocity, ballMFP, ball_color, can_new, need_new_ball, pressure_time, red_time_status, red_time, FPS

    can_new = False
    
    general_collision()		# comment this line if you don't want collision
    
    # For every ball
    for n in range(len(balls)):
        
        # For print the velocity of selected balls
        if balls[n].color == (255,0,0) and not pause:
            print(f'{red_time} Bola {n} = ', balls[n].velocity)
            time_status = True
        
        else:
            balls[n].speed()
        
        # Moving the ball

        balls[n].position[0] += balls[n].velocity[0]
        balls[n].position[1] += balls[n].velocity[1]

        # Wall collision

        if balls[n].position[0] <= ball_radius:
            
            balls[n].velocity[0] = heat  # Heat in the left wall
            
            balls[n].position[0] = (2 * ball_radius) - balls[n].position[0]
            
            mean_free_path(n)
            pressure_time += 1
        
        elif balls[n].position[0] >= screen_size - ball_radius:
            
            balls[n].velocity[0] = -balls[n].velocity[0]
            balls[n].position[0] = (2 * (screen_size - ball_radius)) - balls[n].position[0]
            
            mean_free_path(n)
            pressure_time += 1
        
        if not ball_radius < balls[n].position[1] < screen_size - ball_radius:
            balls[n].velocity[1] = -balls[n].velocity[1]
            
            if balls[n].position[1] <= ball_radius:
                balls[n].position[1] = (2 * ball_radius) - balls[n].position[1]
            
            elif balls[n].position[1] >= screen_size - ball_radius:
                balls[n].position[1] = (2 * (screen_size - ball_radius)) - balls[n].position[1]
            
            mean_free_path(n)
            pressure_time += 1

    # time of the print
    if red_time_status:
        red_time += 1
        red_time_status = False

    # if it's all ok to create a new ball
    if can_new and need_new_ball > 0:

        balls.append(ball())

        need_new_ball -= 1

    elif need_new_ball < 0:
        if len(balls) > 0:

            y = random.randint(0, len(balls) - 1)
            balls.pop(y)

            need_new_ball += 1
        else:

            balls = []

            need_new_ball = 0
            
    FPS += 1

# Trigger per minute for pressure measure
def timer_handler():
    global second, pressure, pressure_time, FPS
    
    second += 1
    pressure = (pressure_time + pressure) / 2
    pressure_time = 0

    print(f'Sec = {second}, nB = {len(balls)}, heat = {heat}, ppm = {round(pressure,1)}, FPS = {FPS}')
    
    FPS = 0

# Create a frame and assign callbacks to event handlers
frame = simplegui.create_frame("Home", screen[0], screen[1])
frame.set_draw_handler(draw)
frame.set_mouseclick_handler(mouse_handler)

# Start the frame animation
frame.start()

# Timer for pressure per minute
timer = simplegui.create_timer(1000, timer_handler)
timer.start()

# Timer for pressure per minute
work = simplegui.create_timer(1, work_handler)
work.start()
